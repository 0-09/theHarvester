from theHarvester.discovery.constants import *
from theHarvester.lib.core import *


class SearchPentestTools:

    def __init__(self, word):
        self.word = word
        self.key = Core.pentest_tools_key()
        if self.key is None:
            raise MissingKey(True)
        self.total_results = ""
        self.api = f'https://pentest-tools.com/api?key={self.key}'
        self.proxy = False

    async def do_search(self):
        url = f'https://dns.bufferover.run/dns?q={self.word}'
        responses = await AsyncFetcher.fetch_all(urls=[url],, json=True, proxy=self.proxy)
        responses = responses[0]
        dct = responses



    async def process(self, proxy=False):
        self.proxy = proxy
        await self.do_search()  # Only need to do it once.

