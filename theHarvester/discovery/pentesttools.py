from theHarvester.discovery.constants import *
from theHarvester.lib.core import *
import json


class SearchPentestTools:

    def __init__(self, word):
        self.word = word
        self.key = Core.pentest_tools_key()
        if self.key is None:
            raise MissingKey(True)
        self.total_results = ""
        self.api = f'https://pentest-tools.com/api?key={self.key}'
        self.proxy = False

    async def do_search(self):
        subdomain_payload = {
            'op': 'start_scan',
            'tool_id': 20,
            'tool_params': {
                'target': f'{self.word}'}
        }

        responses = await AsyncFetcher.post_fetch(url=self.api, data=json.dumps(subdomain_payload))
        dct = responses
        print(dct)

    async def process(self, proxy=False):
        self.proxy = proxy
        await self.do_search()  # Only need to do it once.
